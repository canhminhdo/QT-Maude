load quantum-circuits.maude

mod TELEPORT is
    pr CIRCUIT .

    vars S : Scalar .

    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) .

    op init : -> Config .
    eq init = {
        (qstate: initQState)
        (actions: (H(1) CX(1, 2) CX(0, 1) H(0) M(0) M(1) (c[1] == 1 ? X(2)) (c[0] == 1 ? Z(2))))
        (prob: 1)
        (bits: empty)
        (isEnd: false)
    } .
endm

load model-checker .

mod TELEPORT-PREDS is
    pr TELEPORT .
    inc SATISFACTION .

    subsort Config < State .

    var OCs : Soup{OComp} .
    var PROP : Prop .
    var Q : Qubit .
    var Prob : Scalar .

    op isSuccess : -> Prop .
    eq {(isEnd: true) (qstate: Q) (prob: Prob) OCs} |= isSuccess
    = Prob > 0 implies qubitAt(Q, 2) == qubitAt(qstate(init), 0) .
    eq {OCs} |= PROP = false [owise] .
endm

mod TELEPORT-CHECK is
    inc TELEPORT-PREDS .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .

    op teleProp : -> Formula .
    eq teleProp = <> isSuccess .
endm

in debug.maude

red modelCheck(init, teleProp) .

search in TELEPORT : init =>* {(qstate: Q:Qubit) (isEnd: true) (prob: P:Scalar) OCs:Soup{OComp}}
such that P:Scalar > 0 implies qubitAt(Q:Qubit, 2) == qubitAt(qstate(init), 0) .

--- red getState(getState((initQState).H(1).CX(1, 2).CX(0, 1).H(0).M(P0, 0)).M(P0, 1)) .