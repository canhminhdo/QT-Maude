fmod SCALAR is
    pr CONVERSION .
    pr EXT-BOOL .
    
    sort Scalar .
    subsort Rat < Scalar .
    
    --- basic operators    
    op _.*_ : Scalar Scalar -> Scalar [comm assoc prec 32] .
    op _./_ : Scalar Scalar -> Scalar [prec 31] .
    op _.+_ : Scalar Scalar -> Scalar [comm assoc prec 33] .
    op (_)^* : Scalar -> Scalar [prec 30] .
    
    --- comparative operators
    op _.>_ : Scalar Scalar -> Bool .
    op _.>=_ : Scalar Scalar -> Bool .
    op _.<_ : Scalar Scalar -> Bool .
    op _.<=_ : Scalar Scalar -> Bool .

    --- error scalar
    op errS : -> Scalar .

    --- some functions
    op Sqrt : Scalar -> Scalar .
    op Abs : Scalar -> Scalar .
    op Pow : Scalar Rat -> Scalar .

    vars R R1 R2 : Rat .
    vars S S1 S2 S3 S4 : Scalar .

    --- rational number calculation.
    eq R1 .* R2 = R1 * R2 .
    eq R1 ./ R2 = R1 / R2 .
    eq R1 .+ R2 = R1 + R2 .
    eq R1 .< R2 = R1 < R2 .
    eq R1 .<= R2 = R1 <= R2 .
    eq R1 .> R2 = R1 > R2 .
    eq R1 .>= R2 = R1 >= R2 .

    --- c . c* = |c|^2
    eq S .* (S)^* = Pow(Abs(S), 2) .
    
    --- distributive properties
    eq S1 .* (S2 .+ S3) = S1 .* S2 .+ S1 .* S3 .

    --- constructing normal form: R .* S
    ceq (S .* R1 .+ S .* R2) = S .* (R1 .+ R2) if not S :: Rat .
    ceq S .+ R .* S = S .* (R .+ 1) if not S :: Rat .
    ceq S .+ S = S .* 2 if not S :: Rat .
    
    --- constructing normal form: S1 .* (1 ./ S2)
    ceq S1 ./ S2 = S1 .* (1 ./ S2) if not S1 :: Rat .
    ceq R ./ S = R .* (1 ./ S) if not S :: Rat /\ R =/= 1 .

    --- multiplicative properties
    eq S .* 1 = S .
    eq S .* 0 = 0 .
    ceq S .* (1 ./ S) = 1 if not S :: Rat .
    ceq (1 ./ S1) .* (1 ./ S2) = 1 ./ (S1 .* S2) 
    if not S1 :: Rat /\ not S2 :: Rat .
    
    --- additive properties
    eq S .+ 0 = S .

    --- fraction properties
    eq 0 ./ S = 0 .
    eq S ./ 1 = S .
    ceq S ./ 0 = errS if S =/= 0 .
    eq 1 ./ (1 ./ S) =  S .
    eq 1 ./ (S1 .* (1 ./ S2)) =  S2 .* (1 ./ S1) .
    eq 1 ./ (S .* (R1 / R2)) =  (R2 / R1) .* (1 ./ S) .

    --- Sqrt calculation
    eq Sqrt(1) = 1 .
    eq Sqrt(0) = 0 .
    eq Sqrt(S) .* Sqrt(S) = S .
    eq Sqrt(R1 / R2) = Sqrt(R1) .* (1 ./ Sqrt(R2)) .
    ceq Sqrt(1 ./ S) = 1 ./ Sqrt(S) if not S :: Rat .
    ceq Sqrt(S1 .* S2) = Sqrt(S1) .* Sqrt(S2) if not S1 :: Rat or-else not S2 :: Rat .
    eq Sqrt(S) .* (R ./ S) = R .* (1 ./ Sqrt(S)) .
    eq Sqrt(S1) .* (S2 / S1) = S2 .* (1 ./ Sqrt(S1)) .

    --- transpose of Sqrt
    eq (Sqrt(R))^* = Sqrt(R) .
    eq (S1 .* S2)^* = (S1)^* .* (S2)^* .
    eq (S1 ./ S2)^* = (S1)^* ./ (S2)^* .
    eq (S1 .+ S2)^* = (S1)^* .+ (S2)^* .
    eq (R)^* = R .
endfm

fmod DIRAC is
    pr SCALAR .
    sorts Ket Bra .

    ops |0> |1> : -> Ket [ctor] .
    ops <0| <1| : -> Bra [ctor] .
endfm

fmod MATRIX is
    pr DIRAC .
    sorts Matrix .
    subsorts Ket Bra < Matrix .

    --- zero matrix
    op O : -> Matrix [ctor] .
    --- identity matrix
    op I : -> Matrix [ctor] .
    --- fake matrix
    op nil : -> Matrix [ctor] .
    --- error matrix
    op errM : -> Matrix [ctor] .
    --- scalar product
    op _._ : Scalar Matrix -> Matrix [prec 31] .
    --- matrix product
    op _x_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- matrix addition
    op _+_ : Matrix Matrix -> Matrix [comm assoc prec 33] .
    --- tensor product
    op _(x)_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- dagger
    op (_)^+ : Matrix -> Matrix [prec 30] .

    vars M M1 M2 M3 M4 : Matrix .
    vars S S1 S2 : Scalar .

    --- zero matrix properties
    eq 0 . M = O .
    eq S . O = O .
    eq 1 . M = M .

    eq O + M = M .
    eq M + O = M .

    eq O x M = O .
    eq M x O = O .

    eq M (x) O = O .
    eq O (x) M = O .
    
    --- nil matrix
    eq nil (x) M = M .
    eq M (x) nil = M .

    --- identity matrix properties
    eq I x M = M . 
    eq M x I = M .
    eq <0| x |0> = I .
    eq <1| x |1> = I .
    eq <0| x |1> = O .
    eq <1| x |0> = O .
    
    --- dagger properties
    eq (I)^+ = I .
    eq (O)^+ = O .
    eq (|0>)^+ = <0| .
    eq (|1>)^+ = <1| .
    eq (<0|)^+ = |0> .
    eq (<1|)^+ = |1> .
    eq (S . M)^+ = ((S)^*) . (M)^+ .
    eq (M1 x M2)^+ = (M2)^+ x (M1)^+ .
    eq (M1 + M2)^+ = (M1)^+ + (M2)^+ .
    eq (M1 (x) M2)^+ = (M1)^+ (x) (M2)^+ .
    eq ((M)^+)^+ = M .
     
    --- ditributive properties
    eq M1 x (M2 + M3) = M1 x M2 + M1 x M3 .
    eq (M1 + M2) x M3 = M1 x M3 + M2 x M3 .

    --- additive normal forms
    eq S . (M1 + M2) = S . M1 + S . M2 .
    eq (S1 . M) + (S2 . M) = (S1 .+ S2) . M .
    --- multiplicative normal forms
    eq (S1 . M1) x (S2 . M2) = (S1 .* S2) . (M1 x M2) .
    eq (S . M1) x M2 = S . (M1 x M2) .
    eq M1 x (S . M2) = S . (M1 x M2) .
    --- scalar normal forms
    eq S1 . (S2 . M) = (S1 .* S2) . M .
    --- tensor product normal forms
    --- eq (S1 . M1) (x) (S2 . M2) = (S1 .* S2) . (M1 (x) M2) . --- may ignore
    eq (S . M1) (x) M2 = S . (M1 (x) M2) .
    eq M1 (x) (S . M2) = S . (M1 (x) M2) .

    --- tensor product properties
    eq (M1 (x) M2) x (M3 (x) M4) = (M1 x M3) (x) (M2 x M4) .
    eq M1 (x) (M2 + M3) = M1 (x) M2 + M1 (x) M3 .
    eq (M1 + M2) (x) M3 = M1 (x) M3 + M2 (x) M3 .

    --- basic matrices
    ops B0 B1 B2 B3 P0 P1 : -> Matrix .
    eq B0 = |0> x <0| .
    eq B1 = |0> x <1| .
    eq B2 = |1> x <0| .
    eq B3 = |1> x <1| .
    eq P0 = B0 .
    eq P1 = B3 .

    --- basic gates
    ops X Y Z H CX : -> Matrix .
    eq X = B1 + B2 .
    eq Z = B0  + (-1) . B3 .
    eq H = 1 ./ Sqrt(2) . B0 + 1 ./ Sqrt(2) . B1 + 1 ./ Sqrt(2) . B2 + -1 ./ Sqrt(2) . B3 .
    eq CX = B0 (x) I + B3 (x) X .
endfm

fmod QUBIT is
    pr MATRIX .
    pr NAT-LIST .

    sorts OneQubit EnQubit Qubit .
    subsort OneQubit EnQubit < Qubit .
    
    vars N N1 N2 : Nat .
    vars M M1 M2 M3 G G1 G2 P : Matrix .
    vars NL NL1 NL2 NL3 NL4 : NatList .
    vars NeNL : NeNatList .
    vars QS : Qubit .
    vars S Prob : Scalar .
    vars Ket : Ket .
    vars Bra : Bra .

    op (q[_]:_) : NatList Matrix -> Qubit .
    mb(q[N]: M) : OneQubit .
    mb(q[N1 N2 NL]: M) : EnQubit .
    --- empty qubit
    op emp : -> Qubit [ctor] .
    --- error qubit
    op errQ : -> Qubit [ctor] .
    op __ : Qubit Qubit -> Qubit [ctor assoc comm id: emp] .

    --- applying hadmard gate
    op _.H(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: M) QS).H(N) = (q[NL1 N NL2]: G x M) QS
    if G := iGates(size(NL1)) (x) H (x) iGates(size(NL2)) .

    --- applying X gate
    op _.X(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: M) QS).X(N) = (q[NL1 N NL2]: G x M) QS
    if G := iGates(size(NL1)) (x) X (x) iGates(size(NL2)) .

    --- applying Z gate
    op _.Z(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: M) QS).Z(N) = (q[NL1 N NL2]: G x M) QS
    if G := iGates(size(NL1)) (x) Z (x) iGates(size(NL2)) .

    --- applying CX gate
    op _.CX(_,_) : Qubit Nat Nat -> Qubit .
    ceq ((q[NL1 N1 NL2]: M1) (q[NL3 N2 NL4]: M2) QS).CX(N1, N2) 
    = (q[NL1 N1 NL2 NL3 N2 NL4]: G x M) QS 
    if M := M1 (x) M2 
    /\ G1 := iGates(size(NL1)) (x) B0 (x) iGates(size(NL2)) (x)
            iGates(size(NL3)) (x) I (x) iGates(size(NL4))
    /\ G2 := iGates(size(NL1)) (x) B3 (x) iGates(size(NL2)) (x) 
            iGates(size(NL3)) (x) X (x) iGates(size(NL4)) 
    /\ G := G1 + G2 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: M) QS).CX(N1, N2) = (q[NL1 N1 NL2 N2 NL3]: G x M) QS 
    if G1 := iGates(size(NL1)) (x) B0 (x) iGates(size(NL2)) (x) I (x) iGates(size(NL3))
    /\ G2 := iGates(size(NL1)) (x) B3 (x) iGates(size(NL2)) (x) X (x) iGates(size(NL3)) 
    /\ G := G1 + G2 .

    --- measurement
    sort StateProb .
    op {state:_, prob:_} : Qubit Scalar -> StateProb .
    op getState : StateProb -> Qubit .
    op getProb : StateProb -> Scalar .
    eq getState({state: QS, prob: Prob}) = QS .
    eq getProb({state: QS, prob: Prob}) = Prob .

    --- applying a measurement with a specific matrix at a specific position
    op _.M(_,_) : Qubit Matrix Nat -> StateProb .
    ceq ((q[NL1 N NL2]: M1) QS).M(P, N) 
    = {state: ((q[NL1 N NL2]: ((1 ./ Sqrt(Prob)) . M3)) QS), prob: Prob}
    if M2 := ((M1)^+) x
            ((iGates(size(NL1)) (x) P (x) iGates(size(NL2)))^+) x 
            (iGates(size(NL1)) (x) P (x) iGates(size(NL2))) x 
            M1
    /\ Prob := scalar(M2)
    /\ M3 := (iGates(size(NL1)) (x) P (x) iGates(size(NL2))) x M1 .

    --- obtaining scalar for inter product:  S . I (x) I (x) I -> S
    op scalar : Matrix -> Scalar .
    eq scalar(S . M) = if isIdens(M) then S else errS fi .
    eq scalar(M) = if isIdens(M) then 1 else errS fi .
    eq scalar(O) = 0 .

    --- I (x) I (x) I ...
    op isIdens : Matrix -> Bool .
    eq isIdens(M1 (x) M2) = isIdens(M1) and isIdens(M2) .
    eq isIdens(|1>) = false .
    eq isIdens(|0>) = false .
    eq isIdens(I) = true .

    --- N -> I (x) I (x) ...
    op iGates : Nat -> Matrix .
    eq iGates(0) = nil .
    ceq iGates(N) = I (x) iGates(sd(N, 1)) if N > 0 .

    --- qubit information
    op qubitAt : Qubit Nat -> Matrix .
    eq qubitAt((q[NL1 N NL2]: M) QS, N) = qubitAt*(NL1 N NL2, N, M) .
    eq qubitAt(QS, N) = errM [owise] .

    op qubitAt* : NatList Nat Matrix -> Matrix .
    eq qubitAt*(NL, N, S . M) = S . qubitAt**(NL, N, M) .
    eq qubitAt*(NL, N, S . M1 + M2) = S . qubitAt**(NL, N, M1) + qubitAt*(NL, N, M2) .

    op qubitAt** : NatList Nat Matrix -> Matrix .
    eq qubitAt**(N1 NL, N2, Ket (x) M) = if N1 == N2 then Ket else qubitAt**(NL, N2, M) fi .
    eq qubitAt**(N, N, Ket) = Ket .
endfm

fmod BIT is
    pr NAT .
    pr MAP{Nat,Nat} * (
        sort Entry{Nat,Nat} to EntryBit,
        sort Map{Nat,Nat} to BitMap
    ) .
    sort Bit .
    --- classical bit at index i
    op c[_] : Nat -> Bit .
endfm

fmod ACTION is
    pr NAT .
    sort Action .
    op I`(_`) : Nat -> Action .
    op X`(_`) : Nat -> Action .
    op Z`(_`) : Nat -> Action .
    op H`(_`) : Nat -> Action .
    op CX`(_,_`) : Nat Nat -> Action .
    op M`(_`) : Nat -> Action .
endfm

view Action from TRIV to ACTION is
    sort Elt to Action .
endv

fmod ACTION-LIST is
    pr BIT .
    pr LIST{Action} * (
        sort NeList{Action} to NeActionList,
        sort List{Action} to ActionList
    ) .
    op _==_?_ : Bit Nat ActionList -> Action .
    op _==_?_:_ : Bit Nat ActionList ActionList -> Action .
endfm

fmod SOUP {D :: TRIV} is
    sort Soup{D} .
    subsort D$Elt < Soup{D} .
    op empty : -> Soup{D} [ctor] .
    op __ : Soup{D} Soup{D} -> Soup{D} [ctor assoc comm id: empty] .
endfm

fmod OCOMP is
    pr QUBIT .
    pr ACTION-LIST .
    pr BOOL .
    sort OComp .
    op (state:_) : Qubit -> OComp [ctor] .
    op (prob:_) :  Rat -> OComp [ctor] .
    op (actions:_) : ActionList -> OComp [ctor] .
    op (bits:_) : BitMap -> OComp [ctor] .
    op (isEnd:_) : Bool -> OComp [ctor] .
endfm

view OComp from TRIV to OCOMP is
    sort Elt to OComp .
endv

fmod CONFIG is
    pr SOUP{OComp} .
    sort Config .
    op {_} : Soup{OComp} -> Config [ctor] .
endfm

mod CIRCUIT is
    pr CONFIG .
    
    vars AL AL' : ActionList .
    vars Q Q' QS : Qubit .
    vars OCs : Soup{OComp} .
    vars N N1 N2 : Nat .
    vars Prob Prob' : Scalar .
    vars B : Bool .
    vars BM : BitMap .

    rl [I] : {(state: Q) (actions: (I(N) AL)) OCs}
    => {(state: Q) (actions: AL) OCs} .

    crl [X] : {(state: Q) (actions: (X(N) AL)) OCs}
    => {(state: Q') (actions: AL) OCs} 
    if Q' := (Q).X(N) .

    crl [Z] : {(state: Q) (actions: (Z(N) AL)) OCs}
    => {(state: Q') (actions: AL) OCs} 
    if Q' := (Q).Z(N) .

    crl [H] : {(state: Q) (actions: (H(N) AL)) OCs}
    => {(state: Q') (actions: AL) OCs} 
    if Q' := (Q).H(N) .

    crl [CX] : {(state: Q) (actions: (CX(N1, N2) AL)) OCs}
    => {(state: Q') (actions: AL) OCs} 
    if Q' := (Q).CX(N1, N2).
    
    crl [M0] : {(state: Q) (actions: (M(N) AL)) (prob: Prob) (bits: BM) OCs}
    => {(state: Q') (actions: AL) (prob: (Prob .* Prob')) (bits: insert(N, 0, BM)) OCs} 
    if {state: Q', prob: Prob'} := (Q).M(P0, N) .
 
    crl [M1] : {(state: Q) (actions: (M(N) AL)) (prob: Prob) (bits: BM) OCs}
    => {(state: Q') (actions: AL) (prob: (Prob .* Prob')) (bits: insert(N, 1, BM)) OCs} 
    if {state: Q', prob: Prob'} := (Q).M(P1, N) .

    rl [cif] : {(state: Q) (bits: ((N |-> N1), BM)) (actions: ((c[N] == N2 ? AL') AL)) OCs}
    => {(state: Q) (bits: ((N |-> N1), BM)) 
        (actions: ((if (N1 == N2) then AL' else nil fi) AL)) OCs} .

    rl [end] : {(actions: nil) (isEnd: false) OCs}
    => {(actions: nil) (isEnd: true) OCs} .

    rl [stutter]: {(isEnd: true) OCs} => {(isEnd: true) OCs} .
endm

mod TELEPORT is
    pr CIRCUIT .

    vars S : Scalar .
    
    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    op initState : -> Qubit .
    eq initState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) .

    op init : -> Config .
    eq init = {
        (state: initState) 
        (actions: (H(1) CX(1, 2) CX(0, 1) H(0) M(0) M(1) (c[1] == 1 ? X(2)) (c[0] == 1 ? Z(2))))
        (prob: 1)
        (bits: empty)
        (isEnd: false)
    } .
endm

in model-checker .

mod TELEPORT-PREDS is
    pr TELEPORT .
    inc SATISFACTION .
    subsort Config < State .
    op success : -> Prop .
    var OCs : Soup{OComp} .
    var PROP : Prop .
    var Q : Qubit .
    var Prob : Scalar .
    eq {(isEnd: true) (state: Q) (prob: Prob) OCs} |= success 
    = qubitAt(Q, 2) == qubitAt(initState, 0) and Prob > 0 .
    eq {OCs} |= PROP = false [owise] .
endm

mod TELEPORT-CHECK is
    inc TELEPORT-PREDS .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .
    op teleTest : -> Formula .
    eq teleTest = True U success .
endm

red (initState).H(1).CX(1, 2).CX(0, 1).H(0).M(P0, 0) .
red modelCheck(init, teleTest) .
search in TELEPORT : init =>* {(state: Q:Qubit) (isEnd: true) (prob: P:Scalar) OCs:Soup{OComp}}
such that qubitAt(Q:Qubit, 2) == qubitAt(initState, 0) and P:Scalar > 0 .