load quantum-circuits.maude

mod SECRETE-SHARING is
    pr CIRCUIT .

    vars S : Scalar .

    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) (q[3]: |0>) .

    op init : -> Config .
    eq init = {
        (qstate: initQState)
        (actions: (H(1) CX(1, 2) CX(1, 3) CX(0, 1) H(0) H(2) M(0) M(1) M(2) (c[1] == 1 ? X(3)) (c[0] == 1 ? Z(3)) (c[2] == 1 ? Z(3))))
        (prob: 1)
        (bits: empty)
        (isEnd: false)
    } .
endm

load model-checker .

mod SECRETE-SHARING-PREDS is
    pr SECRETE-SHARING .
    inc SATISFACTION .

    subsort Config < State .

    var OCs : Soup{OComp} .
    var PROP : Prop .
    var Q : Qubit .
    var Prob : Scalar .

    ***************************************************************************************
    *** Factor \gamma on a state for which |\gamma| = 1 is regarded as a 'global phase' ***
    *** States that differ only by a global phase are physically indistinguishable and  ***
    *** equivalent in all ways that are physically equivalent
    ***************************************************************************************
    op isSuccess : -> Prop .
    eq {(isEnd: true) (qstate: Q) (prob: Prob) OCs} |= isSuccess
    = Prob > 0 implies
    ((qubitAt(Q, 3) == qubitAt(qstate(init), 0) or (-1) . qubitAt(Q, 3) == qubitAt(qstate(init), 0))) .
    eq {OCs} |= PROP = false [owise] .
endm

mod SECRETE-SHARING-CHECK is
    inc SECRETE-SHARING-PREDS .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .

    op ssProp : -> Formula .
    eq ssProp = <> isSuccess .
endm

in debug.maude

red modelCheck(init, ssProp) .

search in SECRETE-SHARING : init =>* {(qstate: Q:Qubit) (isEnd: true) (prob: P:Scalar) OCs:Soup{OComp}}
such that P:Scalar > 0 implies (qubitAt(Q:Qubit, 3) == qubitAt(qstate(init), 0) or (-1) . qubitAt(Q:Qubit, 3) == qubitAt(qstate(init), 0)) .

--- red (initQState).H(1) .
--- red (initQState).H(1).CX(1, 2) .
--- red (initQState).H(1).CX(1, 2).CX(1, 3) .
--- red (initQState).H(1).CX(1, 2).CX(1, 3).CX(0, 1) .
--- red (initQState).H(1).CX(1, 2).CX(1, 3).CX(0, 1).H(0) .