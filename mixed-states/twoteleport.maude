load quantum-circuits.maude

mod TWO-TELEPORT is
    pr CIRCUIT .

    var C : Complex .

    ops a b c d : -> Complex .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq C .* Pow(Abs(a), 2) .+ C .* Pow(Abs(b), 2) = C .

    eq Pow(Abs(c), 2) .+ Pow(Abs(d), 2) = 1 .
    eq C .* Pow(Abs(c), 2) .+ C .* Pow(Abs(d), 2) = C .

    ops PSI PHI : -> Vector .
    ops pPSI pPHI : -> Matrix [memo] .
    eq PSI = a . |0> + b . |1> .
    eq PHI = c . |0> + d . |1> .
    eq pPSI = PSI x (PSI)^+ .
    eq pPHI = PHI x (PHI)^+ .

    op ES : -> Ensemble .
    eq ES = {PSI (x) |0>  (x) |0> (x) |0> (x) PHI, 1} .

    op init : -> Config .
    eq init = {
        (#qbits: findN(ES))
        (mState: convert(ES))
        (actions: (
            H(1) CX(1, 2) H(3) CX(3, 4) CX(0, 1) H(0) CX(5, 4) H(5)
            M(0) M(1) M(4) M(5)
            (c[4] == 1 ? X(3)) 
            (c[5] == 1 ? Z(3))
            (c[1] == 1 ? X(2))
            (c[0] == 1 ? Z(2))))
        (prob: 1)
        (bits: empty)
        (isEnd: false)
    } .
endm

load model-checker .

mod TWO-TELEPORT-PREDS is
    pr TWO-TELEPORT .
    inc SATISFACTION .

    subsort Config < State .

    var OCs : Soup{OComp} .
    var PROP : Prop .
    var MS : MixedState .
    var Prob : Complex .
    var N : Nat .

    op isSuccess : -> Prop .
    eq {(isEnd: true) (mState: MS) (prob: Prob) (#qbits: N) OCs} |= isSuccess
    = Prob > 0 implies 
    tr[5](tr[4](tr[1](tr[0](MS, N), N), N), N) == (I (x) I (x) pPSI (x) pPHI (x) I (x) I) 
    [print "Prob = " Prob]
    .
    eq {OCs} |= PROP = false [owise] .
endm

mod TWO-TELEPORT-CHECK is
    inc TWO-TELEPORT-PREDS .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .

    op twoteleProp : -> Formula .
    eq twoteleProp = <> isSuccess .
endm

in ../debug.maude

red modelCheck(init, twoteleProp) .